    1 #include<stdio.h>                                                                                                          
    2 #include<pthread.h>
    3 #include<unistd.h>
    4                            
    5  
    6 pthread_mutex_t My_lockA;         
    7 pthread_mutex_t My_lockB;
    8              
    9 void* MypthreadA(void* arg)
   10 {                                 
   11     //加锁
   12     pthread_mutex_lock(&My_lockA);
   13  
   14     //防止线程B没拿到B锁之前线程A拿到B锁
   15     sleep(2);
   16  
   17     pthread_mutex_lock(&My_lockB);
   18                                        
   19     return NULL;                       
   20 }
   21 void* MypthreadB(void* arg)
   22 {
   23     pthread_mutex_lock(&My_lockB);
   24                                                           
   25     sleep(2);  
   26 
   27     pthread_mutex_lock(&My_lockA);
   28 
   29     return NULL;                                                                                                           
   30 }
   31 
   32 int main()
   33 {
   34     //锁初始化
   35     pthread_mutex_init(&My_lockA,NULL);
   36     pthread_mutex_init(&My_lockB,NULL);
   37 
   38     pthread_t tid_A,tid_B;
   39 
   40     //创建两个线程
   41     int ret = pthread_create(&tid_A,NULL,MypthreadA,NULL);
   42     if(ret < 0)
   43     {
   44         perror("pthread_create");
   45         return 0;
   46     }
   47     pthread_create(&tid_B,NULL,MypthreadB,NULL);
   48     if(ret < 0)
   49     {
   50         perror("pthread_create");
   51         return 0; 
   52     }                                                     
   53                
   54      
   55     //线程等待                   
   56     pthread_join(tid_A,NULL);
   57     pthread_join(tid_B,NULL);
   58                                                 
   59     return 0;  
   60 }                                                        
